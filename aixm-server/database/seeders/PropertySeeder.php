<?php

namespace Database\Seeders;

use App\Models\Aixm\Feature;
use App\Models\Aixm\Property;
use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;

class PropertySeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        /**
         * Features' properties
         */
        $feature_id = Feature::getFeature('AerialRefuelling')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designatorPrefix']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'designatorNumber']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'designatorSuffix']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'designatorDirection']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'name']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'radarBeaconSetting']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'xbandRadarSetting']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'tankerChannel']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'receiverChannel']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'helicopterRoute']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'specialRefuelling']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'bidirectionalUse']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'reverseDirectionTurn']);
        $ref_feature_id = Feature::getFeature('RouteAvailability')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Airspace')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'protectingAirspace', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('AerialRefuellingTrack')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'track', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AerialRefuellingAnchor')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'anchor', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AerialRefuelling')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'oppositeTrack', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('AuthorityForAerialRefuelling')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'managingOrganisation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('AeronauticalGroundLight')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'name', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'colour']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'flashing']);
        $ref_feature_id = Feature::getFeature('VerticalStructure')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'structureBeacon', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'aerodromeBeacon', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'An Aeronautical Ground Light is not always for an AD nor an obstacle. I suggest to have only name/type/location.']);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('AircraftGroundService')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'flightOperations']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'rank']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'compliantICAO']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'name', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Unit')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'serviceProvider', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('CallsignDetail')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'call-sign', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('RadioCommunicationChannel')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'radioCommunication', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('ContactInformation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'groundCommunication', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ServiceOperationalStatus')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'airportHeliport', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type', 'is_identifying' => true]);
        $feature_id = Feature::getFeature('AircraftStand')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designator', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'visualDockingSystem']);
        $ref_feature_id = Feature::getFeature('SurfaceCharacteristics')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'surfaceProperties', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ApronElement')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'apronLocation', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('ElevatedSurface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'extent', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AircraftStandContamination')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'contaminant', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ApronAreaAvailability')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('AirportClearanceService')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'flightOperations']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'rank']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'compliantICAO']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'name', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Unit')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'serviceProvider', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('CallsignDetail')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'call-sign', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('RadioCommunicationChannel')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'radioCommunication', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('ContactInformation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'groundCommunication', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ServiceOperationalStatus')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'airportHeliport', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'snowPlan']);
        $feature_id = Feature::getFeature('AirportHeliportCollocation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'hostAirport', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'This means recursive -> collect the key pf the referenced feature. This is a general rule.']);
        $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'dependentAirport', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designator', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'name']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'locationIndicatorICAO']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'designatorIATA']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'certifiedICAO']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'privateUse']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'controlType']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'fieldElevation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'fieldElevationAccuracy']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'verticalDatum']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticVariation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticVariationAccuracy']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'dateMagneticVariation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticVariationChange']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'referenceTemperature']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'altimeterCheckLocation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'secondaryPowerSupply']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'windDirectionIndicator']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'landingDirectionIndicator']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'transitionAltitude']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'transitionLevel']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lowestTemperature']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'abandoned']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'certificationDate']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'certificationExpirationDate']);
        $ref_feature_id = Feature::getFeature('AirportHeliportContamination')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'contaminant', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('City')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'servedCity', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AirportHeliportResponsibilityOrganisation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'responsibleOrganisation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'ARP', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ElevatedSurface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'aviationBoundary', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AltimeterSource')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'altimeterSource', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('ContactInformation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'contact', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AirportHeliportAvailability')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('AirportHotSpot')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designator', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'instruction']);
        $ref_feature_id = Feature::getFeature('ElevatedSurface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'area', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'affectedAirport', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('AirportProtectionAreaMarking')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'markingICAOStandard', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'condition', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('MarkingElement')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'element', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'markingLocation']);
        $ref_feature_id = Feature::getFeature('AirportHeliportProtectionArea')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'markedProtectionArea', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('AirportSuppliesService')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'flightOperations']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'rank']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'compliantICAO']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'name']);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Unit')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'serviceProvider', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('CallsignDetail')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'call-sign', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('RadioCommunicationChannel')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'radioCommunication', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('ContactInformation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'groundCommunication', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ServiceOperationalStatus')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'airportHeliport', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Fuel')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'fuelSupply', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Oil')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'oilSupply', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Nitrogen')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'nitrogenSupply', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Oxygen')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'oxygenSupply', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('AirspaceBorderCrossing')?->id; $ref_feature_id = Feature::getFeature('Airspace')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'exitedAirspace', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Airspace')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'enteredAirspace', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('Airspace')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'designator', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'localType']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'name', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'designatorICAO']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'controlType']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'upperLowerSeparation']);
        $ref_feature_id = Feature::getFeature('AirspaceLayerClass')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'class', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Route')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'protectedRoute', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('AirspaceGeometryComponent')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'geometryComponent', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AirspaceActivation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'activation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('AirTrafficControlService')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'flightOperations', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'rank']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'compliantICAO']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'name', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Unit')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'serviceProvider', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('CallsignDetail')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'call-sign', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('RadioCommunicationChannel')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'radioCommunication', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('ContactInformation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'groundCommunication', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ServiceOperationalStatus')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'radarAssisted']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'dataLinkEnabled']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'dataLinkChannel']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'clientAirport', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Airspace')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'clientAirspace', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('RoutePortion')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'clientRoute', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Procedure')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'clientProcedure', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('HoldingPattern')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'clientHolding', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('AerialRefuelling')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'clientAerialRefuelling', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('DirectionFinder')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'aircraftLocator', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('AirTrafficManagementService')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'flightOperations', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'rank']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'compliantICAO']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'name', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Unit')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'serviceProvider', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('CallsignDetail')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'call-sign', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('RadioCommunicationChannel')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'radioCommunication', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('ContactInformation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'groundCommunication', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ServiceOperationalStatus')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('Airspace')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'clientAirspace', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('AerialRefuelling')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'clientAerialRefuelling', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('RoutePortion')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'clientRoute', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('AltimeterSource')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'isRemote']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'isPrimary']);
        $ref_feature_id = Feature::getFeature('AltimeterSourceStatus')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('AngleIndication')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'angle', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'angleType']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'indicationDirection', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'trueAngle']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'cardinalDirection']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'minimumReceptionAltitude']);
        $ref_feature_id = Feature::getFeature('DesignatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'fix', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('SignificantPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'pointChoice', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'A choice of a navaid, an airport reference point, a TLOF aiming Point, a fix , a lat/long indicated by point object, or a Rwy threshold which defines the facility makeup..']);
        $feature_id = Feature::getFeature('ApproachLightingSystem')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'emergencyLighting']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'intensityLevel']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'colour']);
        $ref_feature_id = Feature::getFeature('LightElement')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'element', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('GroundLightingAvailability')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'classICAO', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'length']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'sequencedFlashing']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'alignmentIndicator']);
        $ref_feature_id = Feature::getFeature('RunwayDirection')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'servedRunwayDirection', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('ApronElement')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'jetwayAvailability']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'towingAvailability']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'dockingAvailability']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'groundPowerAvailability']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'length']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'width']);
        $ref_feature_id = Feature::getFeature('Apron')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'associatedApron', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('SurfaceCharacteristics')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'surfaceProperties', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ElevatedSurface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'extent', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AirportSuppliesService')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'supplyService', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ApronAreaAvailability')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('ApronLightSystem')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'emergencyLighting']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'intensityLevel']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'colour']);
        $ref_feature_id = Feature::getFeature('LightElement')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'element', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('GroundLightingAvailability')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'position', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('Apron')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'lightedApron', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('ApronMarking')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'markingICAOStandard', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'condition', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('MarkingElement')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'element', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'markingLocation']);
        $ref_feature_id = Feature::getFeature('Apron')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'markedApron', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('Apron')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'name', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'abandoned']);
        $ref_feature_id = Feature::getFeature('SurfaceCharacteristics')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'surfaceProperties', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'associatedAirportHeliport', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('ApronContamination')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'contaminant', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ApronAreaAvailability')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('ArrestingGear')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'status']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'length']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'width']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'engageDevice', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'absorbType', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'bidirectional']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('RunwayDirection')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'runwayDirection', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('SurfaceCharacteristics')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'surfaceProperties', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ArrestingGearExtent')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'extent', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('ArrivalFeederLeg')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'endConditionDesignator']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'legPath']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'legTypeARINC']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'course']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'courseType']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'courseDirection']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'turnDirection']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'speedLimit']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'speedReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'speedInterpretation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'bankAngle']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'length']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'duration']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'procedureTurnRequired']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'upperLimitAltitude']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'upperLimitReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lowerLimitAltitude']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lowerLimitReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'altitudeInterpretation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'altitudeOverrideATC']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'altitudeOverrideReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'verticalAngle']);
        $ref_feature_id = Feature::getFeature('TerminalSegmentPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'startPoint', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('TerminalSegmentPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'endPoint', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Curve')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'trajectory', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('TerminalSegmentPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'arcCentre', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AngleIndication')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'angle', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('DistanceIndication')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'distance', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('AircraftCharacteristic')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'aircraftCategory', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('HoldingUse')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'holding', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ObstacleAssessmentArea')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designSurface', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('InstrumentApproachProcedure')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'approach', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'requiredNavigationPerformance']);
        $feature_id = Feature::getFeature('ArrivalLeg')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'endConditionDesignator']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'legPath']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'legTypeARINC']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'course']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'courseType']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'courseDirection']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'turnDirection']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'speedLimit']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'speedReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'speedInterpretation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'bankAngle']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'length']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'duration']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'procedureTurnRequired']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'upperLimitAltitude']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'upperLimitReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lowerLimitAltitude']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lowerLimitReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'altitudeInterpretation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'altitudeOverrideATC']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'altitudeOverrideReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'verticalAngle']);
        $ref_feature_id = Feature::getFeature('TerminalSegmentPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'startPoint', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('TerminalSegmentPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'endPoint', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Curve')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'trajectory', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('TerminalSegmentPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'arcCentre', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AngleIndication')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'angle', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('DistanceIndication')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'distance', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('AircraftCharacteristic')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'aircraftCategory', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('HoldingUse')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'holding', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ObstacleAssessmentArea')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designSurface', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'requiredNavigationPerformance']);
        $ref_feature_id = Feature::getFeature('StandardInstrumentArrival')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'arrival', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('AuthorityForAirspace')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'responsibleOrganisation', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Airspace')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'assignedAirspace', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('Azimuth')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designator', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'name']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'emissionClass']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'mobile']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticVariation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticVariationAccuracy']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'dateMagneticVariation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'flightChecked']);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AuthorityForNavaidEquipment')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'authority', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('NavaidEquipmentMonitoring')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'monitoring', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('NavaidOperationalStatus')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'trueBearing']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'trueBearingAccuracy']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticBearing']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'angleProportionalLeft']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'angleProportionalRight']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'angleCoverLeft']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'angleCoverRight']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'channel']);
        $feature_id = Feature::getFeature('ChangeOverPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'distance']);
        $ref_feature_id = Feature::getFeature('RoutePortion')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'applicableRoutePortion', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('SignificantPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'Location of the change over point.']);
        $feature_id = Feature::getFeature('CheckpointINS')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'category', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'upperLimit']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'upperLimitReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lowerLimit']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lowerLimitReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'altitudeInterpretation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'distance']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'angle']);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'position', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'description' => 'geometry identification']);
        $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'airportHeliport', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('CheckpointVOR')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'category', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'upperLimit']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'upperLimitReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lowerLimit']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lowerLimitReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'altitudeInterpretation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'distance']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'angle']);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'position', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'description' => 'geometry identification']);
        $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'airportHeliport', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('VOR')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'checkPointFacility', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('CirclingArea')?->id; $ref_feature_id = Feature::getFeature('Surface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'extent', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('InstrumentApproachProcedure')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'approach', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('ApproachCondition')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'condition', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AircraftCharacteristic')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'aircraftCategory', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ObstacleAssessmentArea')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designSurface', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('DeicingAreaMarking')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'markingICAOStandard', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'condition', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('MarkingElement')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'element', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('DeicingArea')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'markedDeicingArea', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('DeicingArea')?->id; $ref_feature_id = Feature::getFeature('Apron')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'associatedApron', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Taxiway')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'taxiwayLocation', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('AircraftStand')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'standLocation', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('SurfaceCharacteristics')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'surfaceProperties', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ElevatedSurface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'extent', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ApronAreaAvailability')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('DepartureLeg')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'endConditionDesignator']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'legPath']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'legTypeARINC']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'course']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'courseType']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'courseDirection']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'turnDirection']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'speedLimit']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'speedReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'speedInterpretation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'bankAngle']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'length']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'duration']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'procedureTurnRequired']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'upperLimitAltitude']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'upperLimitReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lowerLimitAltitude']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lowerLimitReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'altitudeInterpretation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'altitudeOverrideATC']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'altitudeOverrideReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'verticalAngle']);
        $ref_feature_id = Feature::getFeature('TerminalSegmentPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'startPoint', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('TerminalSegmentPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'endPoint', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Curve')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'trajectory', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('TerminalSegmentPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'arcCentre', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AngleIndication')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'angle', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('DistanceIndication')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'distance', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('AircraftCharacteristic')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'aircraftCategory', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('HoldingUse')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'holding', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ObstacleAssessmentArea')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designSurface', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'requiredNavigationPerformance']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'minimumObstacleClearanceAltitude']);
        $ref_feature_id = Feature::getFeature('StandardInstrumentDeparture')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'departure', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('DepartureArrivalCondition')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'condition', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('DesignatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designator', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'name']);
        $ref_feature_id = Feature::getFeature('Point')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('TouchDownLiftOff')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'aimingPoint', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'airportHeliport', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('RunwayCentrelinePoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'runwayPoint', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('DirectionFinder')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designator', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'name']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'emissionClass']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'mobile']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticVariation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticVariationAccuracy']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'dateMagneticVariation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'flightChecked']);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AuthorityForNavaidEquipment')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'authority', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('NavaidEquipmentMonitoring')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'monitoring', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('NavaidOperationalStatus')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'doppler']);
        $ref_feature_id = Feature::getFeature('InformationService')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'informationProvision', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('DistanceIndication')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'distance', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'minimumReceptionAltitude']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        $ref_feature_id = Feature::getFeature('DesignatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'fix', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('SignificantPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'pointChoice', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'A choice of a navaid, an airport reference point, a TLOF aiming Point, a fix , a lat/long indicated by point object, or a Rwy threshold which defines the facility makeup.']);
        $feature_id = Feature::getFeature('DME')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designator', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'name']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'emissionClass']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'mobile']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticVariation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticVariationAccuracy']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'dateMagneticVariation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'flightChecked']);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AuthorityForNavaidEquipment')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'authority', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('NavaidEquipmentMonitoring')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'monitoring', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('NavaidOperationalStatus')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'channel']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'ghostFrequency']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'displace']);
        $feature_id = Feature::getFeature('Elevation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designator', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'name']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'emissionClass']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'mobile']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticVariation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticVariationAccuracy']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'dateMagneticVariation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'flightChecked']);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AuthorityForNavaidEquipment')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'authority', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('NavaidEquipmentMonitoring')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'monitoring', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('NavaidOperationalStatus')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'angleNominal']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'angleMinimum']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'angleSpan']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'angleAccuracy']);
        $feature_id = Feature::getFeature('FinalLeg')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'endConditionDesignator']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'legPath']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'legTypeARINC']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'course']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'courseType']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'courseDirection']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'turnDirection']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'speedLimit']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'speedReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'speedInterpretation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'bankAngle']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'length']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'duration']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'procedureTurnRequired']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'upperLimitAltitude']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'upperLimitReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lowerLimitAltitude']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lowerLimitReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'altitudeInterpretation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'altitudeOverrideATC']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'altitudeOverrideReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'verticalAngle']);
        $ref_feature_id = Feature::getFeature('TerminalSegmentPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'startPoint', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('TerminalSegmentPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'endPoint', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Curve')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'trajectory', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('TerminalSegmentPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'arcCentre', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AngleIndication')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'angle', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('DistanceIndication')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'distance', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('AircraftCharacteristic')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'aircraftCategory', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('HoldingUse')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'holding', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ObstacleAssessmentArea')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designSurface', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('InstrumentApproachProcedure')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'approach', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'guidanceSystem']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'landingSystemCategory']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'minimumBaroVnavTemperature']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'rnpDMEAuthorized']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'courseOffsetAngle']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'courseOffsetSide']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'courseCentrelineDistance']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'courseOffsetDistance']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'courseCentrelineIntersect']);
        $ref_feature_id = Feature::getFeature('ApproachCondition')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'condition', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('TerminalSegmentPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'visualDescentPoint', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('FASDataBlock')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'FASData', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('SignificantPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'finalPathAlignmentPoint', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'A point defined by a latitude, longitude and MSL elevation used in conjunction with the LTP and the geometric center of the WGS-84 ellipsoid to define the vertical plane of a PA RNAV final approach course.']);
        $feature_id = Feature::getFeature('FireFightingService')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'flightOperations']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'rank']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'compliantICAO']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'name', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Unit')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'serviceProvider', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('CallsignDetail')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'call-sign', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('RadioCommunicationChannel')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'radioCommunication', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('ContactInformation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'groundCommunication', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ServiceOperationalStatus')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'airportHeliport', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'category']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'standard']);
        $feature_id = Feature::getFeature('FlightRestriction')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designator', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'instruction']);
        $ref_feature_id = Feature::getFeature('FlightConditionCombination')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'flight', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('FlightRestrictionRoute')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'regulatedRoute', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('FloatingDockSite')?->id; $ref_feature_id = Feature::getFeature('ElevatedSurface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'extent', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('GeoBorder')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'name', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        $ref_feature_id = Feature::getFeature('Curve')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'border', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('Glidepath')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designator', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'name']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'emissionClass']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'mobile']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticVariation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticVariationAccuracy']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'dateMagneticVariation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'flightChecked']);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AuthorityForNavaidEquipment')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'authority', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('NavaidEquipmentMonitoring')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'monitoring', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('NavaidOperationalStatus')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'frequency']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'slope']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'angleAccuracy']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'rdh']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'rdhAccuracy']);
        $feature_id = Feature::getFeature('GroundTrafficControlService')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'flightOperations', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'rank']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'compliantICAO']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'name', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Unit')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'serviceProvider', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('CallsignDetail')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'call-sign', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('RadioCommunicationChannel')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'radioCommunication', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('ContactInformation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'groundCommunication', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ServiceOperationalStatus')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'radarAssisted']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'dataLinkEnabled']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'dataLinkChannel']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'clientAirport', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('GuidanceLineLightSystem')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'emergencyLighting', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'intensityLevel', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'colour', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('LightElement')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'element', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('GroundLightingAvailability')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('GuidanceLine')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'lightedGuidanceLine', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('GuidanceLineMarking')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'markingICAOStandard', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'condition', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('MarkingElement')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'element', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('GuidanceLine')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'markedGuidanceLine', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('GuidanceLine')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designator', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'maxSpeed']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'usageDirection']);
        $ref_feature_id = Feature::getFeature('TouchDownLiftOff')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'connectedTouchDownLiftOff', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('RunwayCentrelinePoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'connectedRunwayCentrelinePoint', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Apron')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'connectedApron', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('AircraftStand')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'connectedStand', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('ElevatedCurve')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'extent', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Taxiway')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'connectedTaxiway', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('HoldingAssessment')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'upperLimit', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'upperLimitReference', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lowerLimit']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lowerLimitReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'speedLimit']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'patternTemplate']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'turbulentAir']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'legLengthToward']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'legLengthAway']);
        $ref_feature_id = Feature::getFeature('SegmentPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'holdingPoint', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('UnplannedHolding')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'unplannedHolding', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('HoldingPattern')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'assessedHoldingPattern', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('ObstacleAssessmentArea')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'obstacleAssessment', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('HoldingPattern')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'outboundCourse']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'outboundCourseType']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'inboundCourse']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'turnDirection']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'upperLimit']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'upperLimitReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lowerLimit']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lowerLimitReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'speedLimit']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'instruction']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'nonStandardHolding']);
        $ref_feature_id = Feature::getFeature('SegmentPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'holdingPoint', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Curve')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'extent', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('HoldingPatternLength')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'outboundLegSpan', 'ref_feature_id' => $ref_feature_id, 'description' => 'Outbound leg ends at a choice of a time, a length or a defined end point.']);
        $feature_id = Feature::getFeature('InformationService')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'flightOperations', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'rank']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'compliantICAO']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'name', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Unit')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'serviceProvider', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('CallsignDetail')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'call-sign', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('RadioCommunicationChannel')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'radioCommunication', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('ContactInformation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'groundCommunication', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ServiceOperationalStatus')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'voice']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'dataLink']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'recorded']);
        $ref_feature_id = Feature::getFeature('VOR')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'navaidBroadcast', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Airspace')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'clientAirspace', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'clientAirport', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('RoutePortion')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'clientRoute', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Procedure')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'clientProcedure', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('HoldingPattern')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'clientHolding', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('AerialRefuelling')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'clientAerialRefuelling', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('InitialLeg')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'endConditionDesignator']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'legPath']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'legTypeARINC']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'course']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'courseType']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'courseDirection']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'turnDirection']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'speedLimit']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'speedReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'speedInterpretation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'bankAngle']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'length']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'duration']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'procedureTurnRequired']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'upperLimitAltitude']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'upperLimitReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lowerLimitAltitude']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lowerLimitReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'altitudeInterpretation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'altitudeOverrideATC']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'altitudeOverrideReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'verticalAngle']);
        $ref_feature_id = Feature::getFeature('TerminalSegmentPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'startPoint', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('TerminalSegmentPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'endPoint', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Curve')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'trajectory', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('TerminalSegmentPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'arcCentre', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AngleIndication')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'angle', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('DistanceIndication')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'distance', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('AircraftCharacteristic')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'aircraftCategory', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('HoldingUse')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'holding', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ObstacleAssessmentArea')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designSurface', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('InstrumentApproachProcedure')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'approach', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'requiredNavigationPerformance']);
        $feature_id = Feature::getFeature('InstrumentApproachProcedure')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'communicationFailureInstruction']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'instruction']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'designCriteria']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'codingStandard']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'flightChecked']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'name', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'RNAV']);
        $ref_feature_id = Feature::getFeature('ProcedureAvailability')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'airportHeliport', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('AircraftCharacteristic')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'aircraftCharacteristic', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ProcedureTransition')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'flightTransition', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('SafeAltitudeArea')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'safeAltitude', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'approachPrefix']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'approachType']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'multipleIdentification']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'copterTrack']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'circlingIdentification']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'courseReversalInstruction']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'additionalEquipment']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'channelGNSS']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'WAASReliable']);
        $ref_feature_id = Feature::getFeature('LandingTakeoffAreaCollection')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'landing', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('MissedApproachGroup')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'missedInstruction', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('FinalProfile')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'finalProfile', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('IntermediateLeg')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'endConditionDesignator']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'legPath']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'legTypeARINC']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'course']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'courseType']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'courseDirection']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'turnDirection']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'speedLimit']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'speedReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'speedInterpretation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'bankAngle']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'length']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'duration']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'procedureTurnRequired']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'upperLimitAltitude']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'upperLimitReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lowerLimitAltitude']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lowerLimitReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'altitudeInterpretation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'altitudeOverrideATC']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'altitudeOverrideReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'verticalAngle']);
        $ref_feature_id = Feature::getFeature('TerminalSegmentPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'startPoint', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('TerminalSegmentPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'endPoint', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Curve')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'trajectory', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('TerminalSegmentPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'arcCentre', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AngleIndication')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'angle', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('DistanceIndication')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'distance', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('AircraftCharacteristic')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'aircraftCategory', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('HoldingUse')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'holding', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ObstacleAssessmentArea')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designSurface', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('InstrumentApproachProcedure')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'approach', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'requiredNavigationPerformance']);
        $feature_id = Feature::getFeature('Localizer')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designator', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'name']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'emissionClass']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'mobile']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticVariation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticVariationAccuracy']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'dateMagneticVariation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'flightChecked']);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AuthorityForNavaidEquipment')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'authority', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('NavaidEquipmentMonitoring')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'monitoring', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('NavaidOperationalStatus')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'frequency']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticBearing']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticBearingAccuracy']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'trueBearing']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'trueBearingAccuracy']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'declination']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'widthCourse']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'widthCourseAccuracy']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'backCourseUsable']);
        $feature_id = Feature::getFeature('MarkerBeacon')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designator', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'name']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'emissionClass']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'mobile']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticVariation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticVariationAccuracy']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'dateMagneticVariation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'flightChecked']);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AuthorityForNavaidEquipment')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'authority', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('NavaidEquipmentMonitoring')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'monitoring', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('NavaidOperationalStatus')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'class']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'frequency']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'axisBearing']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'auralMorseCode']);
        $feature_id = Feature::getFeature('MarkingBuoy')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designator', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'colour']);
        $ref_feature_id = Feature::getFeature('SeaplaneLandingArea')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'theSeaplaneLandingArea', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('MissedApproachLeg')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'endConditionDesignator']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'legPath']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'legTypeARINC']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'course']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'courseType']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'courseDirection']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'turnDirection']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'speedLimit']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'speedReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'speedInterpretation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'bankAngle']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'length']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'duration']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'procedureTurnRequired']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'upperLimitAltitude']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'upperLimitReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lowerLimitAltitude']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lowerLimitReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'altitudeInterpretation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'altitudeOverrideATC']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'altitudeOverrideReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'verticalAngle']);
        $ref_feature_id = Feature::getFeature('TerminalSegmentPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'startPoint', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('TerminalSegmentPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'endPoint', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Curve')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'trajectory', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('TerminalSegmentPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'arcCentre', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AngleIndication')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'angle', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('DistanceIndication')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'distance', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('AircraftCharacteristic')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'aircraftCategory', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('HoldingUse')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'holding', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ObstacleAssessmentArea')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designSurface', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('InstrumentApproachProcedure')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'approach', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'thresholdAfterMAPT']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'heightMAPT']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'requiredNavigationPerformance']);
        $ref_feature_id = Feature::getFeature('ApproachCondition')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'condition', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('Navaid')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'designator', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'name']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'flightChecked']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'purpose']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'signalPerformance']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'courseQuality']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'integrityLevel']);
        $ref_feature_id = Feature::getFeature('TouchDownLiftOff')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'touchDownLiftOff', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('NavaidComponent')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'navaidEquipment', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('RunwayDirection')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'runwayDirection', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'servedAirport', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('NavaidOperationalStatus')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('NavigationAreaRestriction')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('Procedure')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'procedure', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('ObstacleAssessmentArea')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designSurface', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('CircleSector')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'sectorDefinition', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('SignificantPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'centrePoint', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'The point which the navigation area is based on.']);
        $feature_id = Feature::getFeature('NavigationArea')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'navigationAreaType', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'minimumCeiling', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'minimumVisibility', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('StandardInstrumentDeparture')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'departure', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('NavigationAreaSector')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'sector', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('NDB')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designator', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'name']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'emissionClass']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'mobile']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticVariation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticVariationAccuracy']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'dateMagneticVariation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'flightChecked']);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AuthorityForNavaidEquipment')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'authority', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('NavaidEquipmentMonitoring')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'monitoring', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('NavaidOperationalStatus')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'frequency']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'class']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'emissionBand']);
        $feature_id = Feature::getFeature('NonMovementArea')?->id; $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'associatedAirportHeliport', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('ElevatedSurface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'extent', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('ObstacleArea')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'obstructionIdSurfaceCondition', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('ObstacleAreaOrigin')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'isDefinedFor', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Surface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'surfaceExtent', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('VerticalStructure')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'obstacle', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'name', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'designator', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'military']);
        $ref_feature_id = Feature::getFeature('ContactInformation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'contact', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthorityAssociation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'relatedOrganisationAuthority', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('PassengerLoadingBridge')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('ElevatedSurface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'extent', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AircraftStand')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'associatedStand', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('PassengerService')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'flightOperations']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'rank']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'compliantICAO']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'name', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Unit')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'serviceProvider', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('CallsignDetail')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'call-sign', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('RadioCommunicationChannel')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'radioCommunication', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('ContactInformation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'groundCommunication', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ServiceOperationalStatus')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'airportHeliport', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type', 'is_identifying' => true]);
        $feature_id = Feature::getFeature('PilotControlledLighting')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'duration']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'intensitySteps']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'standByIntensity']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'radioFrequency']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'activationInstruction']);
        $ref_feature_id = Feature::getFeature('LightActivation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'controlledLightIntensity', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('GroundLightSystem')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'activatedGroundLighting', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('PrecisionApproachRadar')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'name']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'serialNumber']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'range']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'rangeAccuracy']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'dualChannel']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'movingTargetIndicator']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'standbyPower']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'digital']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'militaryUseOnly']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'specialUseOnly']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'specialAircraftOnly']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticVariation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticVariationAccuracy']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'dateMagneticVariation']);
        $ref_feature_id = Feature::getFeature('ContactInformation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'contact', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'precisionApproachRadarType']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'slope']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'slopeAccuracy']);
        $ref_feature_id = Feature::getFeature('Reflector')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'reflector', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('PrimarySurveillanceRadar')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'name']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'serialNumber']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'range']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'rangeAccuracy']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'dualChannel']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'movingTargetIndicator']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'standbyPower']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'digital']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'militaryUseOnly']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'specialUseOnly']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'specialAircraftOnly']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticVariation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticVariationAccuracy']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'dateMagneticVariation']);
        $ref_feature_id = Feature::getFeature('ContactInformation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'contact', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'verticalCoverageAltitude']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'verticalCoverageDistance']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'verticalCoverageAzimuth']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'antennaTiltFixed']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'tiltAngle']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'automatedRadarTerminalSystem']);
        $ref_feature_id = Feature::getFeature('SurveillanceGroundStation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'groundStation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        $feature_id = Feature::getFeature('Procedure')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'communicationFailureInstruction', 'description' => 'Operational instructions which must be observed in case of communication failure.']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'instruction', 'description' => 'Some free text to describe operational instructions (other than communication failure instructions) which must be respected when flying the Procedure.']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'designCriteria', 'description' => 'Rules used in the design of the procedure.']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'codingStandard', 'description' => 'The set of rules followed when encoding the procedure legs']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'flightChecked', 'description' => 'Indicates if the procedure has been flight checked.']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'name', 'is_identifying' => true, 'description' => 'The name of the instrument procedure.']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'RNAV', 'description' => 'Indicates the procedure is an RNAV procedure']);
        $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'airportHeliport', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('GuidanceService')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'guidanceFacility', 'ref_feature_id' => $ref_feature_id, 'description' => 'The guidance facility on which the Procedure is based']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('SafeAltitudeArea')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'safeAltitude', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'A series of minimum altitudes in the area where the procedure is executed.']);
        $ref_feature_id = Feature::getFeature('ProcedureTransition')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'flightTransition', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ProcedureAvailability')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id, 'description' => 'The operational availability of the Procedure.']);
        $ref_feature_id = Feature::getFeature('AircraftCharacteristic')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'aircraftCharacteristic', 'ref_feature_id' => $ref_feature_id, 'description' => 'aircraft equipment or category limits']);
        $feature_id = Feature::getFeature('ProcedureDME')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'criticalDME', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'satisfactory', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('DME')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'DME', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('SegmentLeg')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'segmentLeg', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('RadarSystem')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'model']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'generalTerrainMonitor']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'broadcastIdentifier']);
        $ref_feature_id = Feature::getFeature('RadarComponent')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'radarEquipment', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'office', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'airportHeliport', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Runway')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'PARRunway', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('RadioCommunicationChannel')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'mode']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'rank']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'frequencyTransmission', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'frequencyReception']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'channel']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'logon']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'emissionType']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'selectiveCall']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'flightChecked']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'trafficDirection']);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('RadioCommunicationOperationalStatus')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('RadioFrequencyArea')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'angleScallop']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'signalType']);
        $ref_feature_id = Feature::getFeature('CircleSector')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'sector', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('EquipmentChoice')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'limits', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Surface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'extent', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('Road')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designator', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'status']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'abandoned']);
        $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'associatedAirport', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('SurfaceCharacteristics')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'surfaceProperties', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AircraftStand')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'accessibleStand', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('ElevatedSurface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'surfaceExtent', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('RouteDME')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'criticalDME']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'satisfactory']);
        $ref_feature_id = Feature::getFeature('DME')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'referencedDME', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('RoutePortion')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'applicableRoutePortion', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('RouteSegment')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'level']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'upperLimit']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'upperLimitReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lowerLimit']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lowerLimitReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'minimumObstacleClearanceAltitude']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'pathType']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'trueTrack']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticTrack']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'reverseTrueTrack']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'reverseMagneticTrack']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'length']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'widthLeft']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'widthRight']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'turnDirection']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'signalGap']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'minimumEnrouteAltitude']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'minimumCrossingAtEnd']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'minimumCrossingAtEndReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'maximumCrossingAtEnd']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'maximumCrossingAtEndReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'navigationType']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'requiredNavigationPerformance']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'designatorSuffix']);
        $ref_feature_id = Feature::getFeature('EnRouteSegmentPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'start', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Route')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'routeFormed', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('ObstacleAssessmentArea')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'evaluationArea', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Curve')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'curveExtent', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('EnRouteSegmentPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'end', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('RouteAvailability')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('Route')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designatorPrefix', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'designatorSecondLetter', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'designatorNumber', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'multipleIdentifier', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'locationDesignator', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'name']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'flightRule']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'internationalUse']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'militaryUse']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'militaryTrainingType']);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'userOrganisation', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('RulesProcedures')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'category']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'title']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'content', 'description' => 'Attention, this is XHTMLType!']);
        $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'affectedLocation', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Airspace')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'affectedArea', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('RunwayBlastPad')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'length', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'status']);
        $ref_feature_id = Feature::getFeature('RunwayDirection')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'usedRunwayDirection', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('ElevatedSurface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'extent', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('SurfaceCharacteristics')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'surfaceProperties', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('RunwayCentrelinePoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'role', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'designator', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('RunwayDirection')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'onRunway', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('RunwayDeclaredDistance')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'associatedDeclaredDistance', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('NavaidEquipmentDistance')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'navaidEquipment', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('RunwayDirectionLightSystem')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'emergencyLighting']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'intensityLevel']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'colour']);
        $ref_feature_id = Feature::getFeature('LightElement')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'element', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('GroundLightingAvailability')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'position', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('RunwayDirection')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'associatedRunwayDirection', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('RunwayDirection')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designator', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'trueBearing']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'trueBearingAccuracy']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticBearing']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'patternVFR']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'slopeTDZ']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'elevationTDZ']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'elevationTDZAccuracy']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'approachMarkingType']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'approachMarkingCondition']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'classLightingJAR']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'precisionApproachGuidance']);
        $ref_feature_id = Feature::getFeature('Runway')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'usedRunway', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('RunwayElement')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'startingElement', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ManoeuvringAreaAvailability')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('RunwayElement')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'length']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'width']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'gradeSeparation']);
        $ref_feature_id = Feature::getFeature('SurfaceCharacteristics')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'surfaceProperties', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Runway')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'associatedRunway', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('ElevatedSurface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'extent', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ManoeuvringAreaAvailability')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('RunwayMarking')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'markingICAOStandard', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'condition']);
        $ref_feature_id = Feature::getFeature('MarkingElement')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'element', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'markingLocation', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('Runway')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'markedRunway', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('RunwayProtectAreaLightSystem')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'emergencyLighting']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'intensityLevel']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'colour']);
        $ref_feature_id = Feature::getFeature('LightElement')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'element', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('GroundLightingAvailability')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'position', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('RunwayProtectArea')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'lightedArea', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('RunwayProtectArea')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'width']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'length']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lighting']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'obstacleFree']);
        $ref_feature_id = Feature::getFeature('SurfaceCharacteristics')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'surfaceProperties', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ElevatedSurface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'extent', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'status']);
        $ref_feature_id = Feature::getFeature('RunwayDirection')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'protectedRunwayDirection', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('Runway')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designator', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'nominalLength']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lengthAccuracy']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'nominalWidth']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'widthAccuracy']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'widthShoulder']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lengthStrip']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'widthStrip']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lengthOffset']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'widthOffset']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'abandoned']);
        $ref_feature_id = Feature::getFeature('SurfaceCharacteristics')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'surfaceProperties', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'associatedAirportHeliport', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('RunwayContamination')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'overallContaminant', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('RunwaySectionContamination')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'areaContaminant', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('RunwayVisualRange')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'readingPosition', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('RunwayDirection')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'associatedRunwayDirection', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('SafeAltitudeArea')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'safeAreaType']);
        $ref_feature_id = Feature::getFeature('SafeAltitudeAreaSector')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'sector', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('SignificantPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'centrePoint', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'The point used to build the Safe Altitude Area.']);
        $feature_id = Feature::getFeature('SDF')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designator', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'name']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'emissionClass']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'mobile']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticVariation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticVariationAccuracy']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'dateMagneticVariation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'flightChecked']);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AuthorityForNavaidEquipment')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'authority', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('NavaidEquipmentMonitoring')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'monitoring', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('NavaidOperationalStatus')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'frequency']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticBearing']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'trueBearing']);
        $feature_id = Feature::getFeature('SeaplaneLandingArea')?->id; $ref_feature_id = Feature::getFeature('SeaplaneRampSite')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'rampSite', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('FloatingDockSite')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'dockSite', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('ElevatedSurface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'extent', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ManoeuvringAreaAvailability')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('SeaplaneRampSite')?->id; $ref_feature_id = Feature::getFeature('ElevatedSurface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'extent', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ElevatedCurve')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'centreline', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('SearchRescueService')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'flightOperations', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'rank']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'compliantICAO']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'name', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Unit')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'serviceProvider', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('CallsignDetail')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'call-sign', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('RadioCommunicationChannel')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'radioCommunication', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('ContactInformation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'groundCommunication', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ServiceOperationalStatus')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('Airspace')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'clientAirspace', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('RoutePortion')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'clientRoute', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('SecondarySurveillanceRadar')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'name']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'serialNumber']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'range']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'rangeAccuracy']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'dualChannel']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'movingTargetIndicator']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'standbyPower']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'digital']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'militaryUseOnly']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'specialUseOnly']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'specialAircraftOnly']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticVariation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticVariationAccuracy']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'dateMagneticVariation']);
        $ref_feature_id = Feature::getFeature('ContactInformation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'contact', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'verticalCoverageAltitude']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'verticalCoverageDistance']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'verticalCoverageAzimuth']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'antennaTiltFixed']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'tiltAngle']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'automatedRadarTerminalSystem']);
        $ref_feature_id = Feature::getFeature('SurveillanceGroundStation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'groundStation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'transponder']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'autonomous']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'monopulse']);
        $feature_id = Feature::getFeature('SignificantPointInAirspace')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'relativeLocation']);
        $ref_feature_id = Feature::getFeature('Airspace')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'containingAirspace', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('SignificantPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'The location of the SignificantPointInAirspace.']);
        $feature_id = Feature::getFeature('SpecialDate')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'dateDay', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'dateYear', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'name']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'authority', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('SpecialNavigationStation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'name', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'frequency']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'emission']);
        $ref_feature_id = Feature::getFeature('SpecialNavigationSystem')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'systemChain', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('AuthorityForSpecialNavigationStation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'responsibleOrganisation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'position', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('SpecialNavigationStationStatus')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('SpecialNavigationSystem')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'designator', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'name']);
        $ref_feature_id = Feature::getFeature('AuthorityForSpecialNavigationSystem')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'responsibleOrganisation', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('StandardInstrumentArrival')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'communicationFailureInstruction']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'instruction']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'designCriteria']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'codingStandard']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'flightChecked']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'name']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'RNAV']);
        $ref_feature_id = Feature::getFeature('ProcedureAvailability')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'airportHeliport', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('AircraftCharacteristic')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'aircraftCharacteristic', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ProcedureTransition')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'flightTransition', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('SafeAltitudeArea')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'safeAltitude', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'designator', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('LandingTakeoffAreaCollection')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'arrival', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('StandardInstrumentDeparture')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'communicationFailureInstruction']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'instruction']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'designCriteria']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'codingStandard']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'flightChecked']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'name']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'RNAV']);
        $ref_feature_id = Feature::getFeature('ProcedureAvailability')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'airportHeliport', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('AircraftCharacteristic')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'aircraftCharacteristic', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ProcedureTransition')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'flightTransition', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('SafeAltitudeArea')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'safeAltitude', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'designator', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'contingencyRoute']);
        $ref_feature_id = Feature::getFeature('LandingTakeoffAreaCollection')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'takeoff', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('StandardLevelColumn')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'series', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'unitOfMeasurement', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'separation', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('StandardLevel')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'level', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('StandardLevelTable')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'levelTable', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('StandardLevelSector')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'flightRule']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'fromTrack', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'toTrack', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'angleType']);
        $ref_feature_id = Feature::getFeature('Airspace')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'applicableAirspace', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('StandardLevelColumn')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'applicableLevelColumn', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('StandardLevelTable')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'name', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'standardICAO']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('StandMarking')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'markingICAOStandard', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'condition', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('MarkingElement')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'element', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AircraftStand')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'markedStand', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('SurveyControlPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designator', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'associatedAirportHeliport', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('TACAN')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designator', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'name']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'emissionClass']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'mobile']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticVariation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticVariationAccuracy']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'dateMagneticVariation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'flightChecked']);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AuthorityForNavaidEquipment')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'authority', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('NavaidEquipmentMonitoring')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'monitoring', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('NavaidOperationalStatus')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'channel']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'declination']);
        $feature_id = Feature::getFeature('TaxiHoldingPositionLightSystem')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'emergencyLighting']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'intensityLevel']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'colour']);
        $ref_feature_id = Feature::getFeature('LightElement')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'element', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('GroundLightingAvailability')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('TaxiHoldingPosition')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'taxiHolding', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('TaxiHoldingPositionMarking')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'markingICAOStandard', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'condition', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('MarkingElement')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'element', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('TaxiHoldingPosition')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'markedTaxiHold', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('TaxiHoldingPosition')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'landingCategory', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'status']);
        $ref_feature_id = Feature::getFeature('GuidanceLine')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'associatedGuidanceLine', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Runway')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'protectedRunway', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('TaxiwayElement')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'length']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'width']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'gradeSeparation']);
        $ref_feature_id = Feature::getFeature('SurfaceCharacteristics')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'surfaceProperties', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Taxiway')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'associatedTaxiway', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('ElevatedSurface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'extent', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ManoeuvringAreaAvailability')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('TaxiwayLightSystem')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'emergencyLighting']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'intensityLevel']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'colour']);
        $ref_feature_id = Feature::getFeature('LightElement')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'element', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('GroundLightingAvailability')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'position', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('Taxiway')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'lightedTaxiway', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('TaxiwayMarking')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'markingICAOStandard', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'condition', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('MarkingElement')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'element', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'markingLocation', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('Taxiway')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'markedTaxiway', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('TaxiwayElement')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'markedElement', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('Taxiway')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designator', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'width']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'widthShoulder']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'length']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'abandoned']);
        $ref_feature_id = Feature::getFeature('SurfaceCharacteristics')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'surfaceProperties', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'associatedAirportHeliport', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('TaxiwayContamination')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'contaminant', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ManoeuvringAreaAvailability')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('TerminalArrivalArea')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'arrivalAreaType', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'outerBufferWidth', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lateralBufferWidth']);
        $ref_feature_id = Feature::getFeature('Surface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'buffer', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('TerminalArrivalAreaSector')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'sector', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('InstrumentApproachProcedure')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'approachRNAV', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('SignificantPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'IAF', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'Initial Approach Fix. The starting point of the Initial Segment.']);
        $ref_feature_id = Feature::getFeature('SignificantPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'IF', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'The Intermediate fix. The ending point of the initial segment and the starting point of the intermediate segment.']);
        $feature_id = Feature::getFeature('TouchDownLiftOffLightSystem')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'emergencyLighting']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'intensityLevel']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'colour']);
        $ref_feature_id = Feature::getFeature('LightElement')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'element', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('GroundLightingAvailability')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'position', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('TouchDownLiftOff')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'lightedTouchDownLiftOff', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('TouchDownLiftOffMarking')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'markingICAOStandard']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'condition']);
        $ref_feature_id = Feature::getFeature('MarkingElement')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'element', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'markingLocation', 'is_identifying' => true]);
        $ref_feature_id = Feature::getFeature('TouchDownLiftOff')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'markedTouchDownLiftOff', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('TouchDownLiftOffSafeArea')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'width', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'length', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lighting']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'obstacleFree']);
        $ref_feature_id = Feature::getFeature('SurfaceCharacteristics')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'surfaceProperties', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ElevatedSurface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'extent', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('TouchDownLiftOff')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'protectedTouchDownLiftOff', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('TouchDownLiftOff')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designator', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'length']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'width']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'slope']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'helicopterClass']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'abandoned']);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'aimingPoint', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ElevatedSurface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'extent', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('SurfaceCharacteristics')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'surfaceProperties', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'associatedAirportHeliport', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Runway')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'approachTakeOffArea', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('TouchDownLiftOffContamination')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'contaminant', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ManoeuvringAreaAvailability')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('Unit')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'name']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'compliantICAO']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'designator', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'military']);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'position', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'airportLocation', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'ownerOrganisation', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('ContactInformation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'contact', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('UnitDependency')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'relatedUnit', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('UnitAvailability')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('UnplannedHolding')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'unplannedHolding']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'authorizedAltitude']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'altitudeReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'controlledAirspace']);
        $ref_feature_id = Feature::getFeature('SegmentPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'holdingPoint', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('VerticalStructure')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'name', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lighted']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'markingICAOStandard']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'group']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'length']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'width']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'radius']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lightingICAOStandard']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'synchronisedLighting']);
        $ref_feature_id = Feature::getFeature('MarkerBeacon')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'marker', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('VerticalStructurePart')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'part', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('PassengerService')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'hostedPassengerService', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('GroundLightSystem')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'supportedGroundLight', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('NavaidEquipment')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'hostedNavaidEquipment', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('SpecialNavigationStation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'hostedSpecialNavStation', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Unit')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'hostedUnit', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'hostedOrganisation', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Service')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'supportedService', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('VerticalStructureLightingStatus')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'lightingAvailability', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('VisualGlideSlopeIndicator')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'emergencyLighting']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'intensityLevel']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'colour']);
        $ref_feature_id = Feature::getFeature('LightElement')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'element', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('GroundLightingAvailability')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'position']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'numberBox']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'portable']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'slopeAngle']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'minimumEyeHeightOverThreshold']);
        $ref_feature_id = Feature::getFeature('RunwayDirection')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'runwayDirection', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('VOR')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designator', 'is_identifying' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'name']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'emissionClass']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'mobile']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticVariation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'magneticVariationAccuracy']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'dateMagneticVariation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'flightChecked']);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'description' => 'Designator and Authority should be sufficient.']);
        $ref_feature_id = Feature::getFeature('AuthorityForNavaidEquipment')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'authority', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('NavaidEquipmentMonitoring')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'monitoring', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('NavaidOperationalStatus')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'frequency']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'zeroBearingDirection']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'declination']);
        $feature_id = Feature::getFeature('WorkArea')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'plannedOperational']);
        $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'associatedAirportHeliport', 'is_identifying' => true, 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('ElevatedSurface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'extent', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('WorkareaActivity')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'activation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('AerialRefuellingAnchor')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'outboundCourse']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'outboundCourseType']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'inboundCourse']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'turnDirection']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'speedLimit']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'legSeparation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'legLength']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'refuellingBaseLevel']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'refuellingBaseLevelReference']);
        $ref_feature_id = Feature::getFeature('Surface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'extent', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AirspaceLayer')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'verticalExtent', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AerialRefuellingPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'point', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('AerialRefuellingPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'reportingATC']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'flyOver']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'waypoint']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'radarGuidance']);
        $ref_feature_id = Feature::getFeature('PointReference')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'facilityMakeup', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('RadioFrequencyArea')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'extendedServiceVolume', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'sequence']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'usageType']);
        $feature_id = Feature::getFeature('AerialRefuellingTrack')?->id; $ref_feature_id = Feature::getFeature('Curve')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'extent', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AerialRefuellingPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'point', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AirspaceLayer')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'verticalExtent', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('AircraftCharacteristic')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'engine']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'numberEngine']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'typeAircraftICAO']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'aircraftLandingCategory']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'wingSpan']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'wingSpanInterpretation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'classWingSpan']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'weight']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'weightInterpretation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'passengers']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'passengersInterpretation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'speed']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'speedInterpretation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'wakeTurbulence']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'navigationEquipment']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'navigationSpecification']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'verticalSeparationCapability']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'antiCollisionAndSeparationEquipment']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'communicationEquipment']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'surveillanceEquipment']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('AircraftStandContamination')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'observationTime']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'depth']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'frictionCoefficient']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'frictionEstimation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'frictionDevice']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'obscuredLights']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'furtherClearanceTime']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'furtherTotalClearance']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'nextObservationTime']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'proportion']);
        $ref_feature_id = Feature::getFeature('Ridge')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'criticalRidge', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('SurfaceContaminationLayer')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'layer', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('AirportHeliportAvailability')?->id; $ref_feature_id = Feature::getFeature('Timesheet')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'timeInterval', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'specialDateAuthority', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'operationalStatus']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'warning']);
        $ref_feature_id = Feature::getFeature('AirportHeliportUsage')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'usage', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('AirportHeliportContamination')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'observationTime']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'depth']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'frictionCoefficient']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'frictionEstimation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'frictionDevice']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'obscuredLights']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'furtherClearanceTime']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'furtherTotalClearance']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'nextObservationTime']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'proportion']);
        $ref_feature_id = Feature::getFeature('Ridge')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'criticalRidge', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('SurfaceContaminationLayer')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'layer', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('AirportHeliportResponsibilityOrganisation')?->id; $ref_feature_id = Feature::getFeature('Timesheet')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'timeInterval', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'specialDateAuthority', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'role']);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'theOrganisationAuthority', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('AirportHeliportUsage')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'priorPermission']);
        $ref_feature_id = Feature::getFeature('ContactInformation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'contact', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ConditionCombination')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'selection', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'operation']);
        $feature_id = Feature::getFeature('AirspaceActivation')?->id; $ref_feature_id = Feature::getFeature('Timesheet')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'timeInterval', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'specialDateAuthority', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'activity']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'status']);
        $ref_feature_id = Feature::getFeature('AirspaceLayer')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'levels', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'user', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('AircraftCharacteristic')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'aircraft', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('AirspaceGeometryComponent')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'operation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'operationSequence']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AirspaceVolume')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'theAirspaceVolume', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('AirspaceLayerClass')?->id; $ref_feature_id = Feature::getFeature('Timesheet')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'timeInterval', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'specialDateAuthority', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'classification']);
        $ref_feature_id = Feature::getFeature('AirspaceLayer')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'associatedLevels', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('AirspaceLayer')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'upperLimit']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'upperLimitReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lowerLimit']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lowerLimitReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'altitudeInterpretation']);
        $ref_feature_id = Feature::getFeature('StandardLevelColumn')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'discreteLevelSeries', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('AirspaceVolumeDependency')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'dependency']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Airspace')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'theAirspace', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('AirspaceVolume')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'upperLimit']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'upperLimitReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'maximumLimit']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'maximumLimitReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lowerLimit']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lowerLimitReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'minimumLimit']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'minimumLimitReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'width']);
        $ref_feature_id = Feature::getFeature('Surface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'horizontalProjection', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Curve')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'centreline', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AirspaceVolumeDependency')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'contributorAirspace', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('AltimeterSourceStatus')?->id; $ref_feature_id = Feature::getFeature('Timesheet')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'timeInterval', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'specialDateAuthority', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'operationalStatus']);
        $feature_id = Feature::getFeature('AltitudeAdjustment')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'altitudeAdjustmentType']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'primaryAlternateMinimum']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'altitudeAdjustment']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'localRemoteCode']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('AngleUse')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'alongCourseGuidance']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AngleIndication')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'theAngleIndication', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('ApproachAltitudeTable')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'measurementPoint']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'altitude']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'altitudeReference']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('ApproachCondition')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'finalApproachPath']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'requiredNavigationPerformance']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'climbGradient']);
        $ref_feature_id = Feature::getFeature('Minima')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'minimumSet', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('CirclingRestriction')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'circlingRestriction', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AircraftCharacteristic')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'aircraftCategory', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('LandingTakeoffAreaCollection')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'landingArea', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AltimeterSource')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'altimeter', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('ObstacleAssessmentArea')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'designSurface', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('ApproachDistanceTable')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'startingMeasurementPoint']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'valueHAT']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'endingMeasurementPoint']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'distance']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('ApproachTimingTable')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'startingMeasurementPoint']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'endingMeasurementPoint']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'time']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'speed']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('ApronAreaAvailability')?->id; $ref_feature_id = Feature::getFeature('Timesheet')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'timeInterval', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'specialDateAuthority', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'operationalStatus']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'warning']);
        $ref_feature_id = Feature::getFeature('ApronAreaUsage')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'usage', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('ApronAreaUsage')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'priorPermission']);
        $ref_feature_id = Feature::getFeature('ContactInformation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'contact', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ConditionCombination')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'selection', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('ApronContamination')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'observationTime']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'depth']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'frictionCoefficient']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'frictionEstimation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'frictionDevice']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'obscuredLights']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'furtherClearanceTime']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'furtherTotalClearance']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'nextObservationTime']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'proportion']);
        $ref_feature_id = Feature::getFeature('Ridge')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'criticalRidge', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('SurfaceContaminationLayer')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'layer', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('ArrestingGearExtent')?->id; $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'pointExtent', 'ref_feature_id' => $ref_feature_id, 'description' => 'ArrestGearExtent is a point.']);
        $ref_feature_id = Feature::getFeature('ElevatedCurve')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'curveExtent', 'ref_feature_id' => $ref_feature_id, 'description' => 'ArrestingGearExtent is a curve.']);
        $ref_feature_id = Feature::getFeature('ElevatedSurface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'surfaceExtent', 'ref_feature_id' => $ref_feature_id, 'description' => 'ArrestingGearExtent is a surface.']);
        $feature_id = Feature::getFeature('AuthorityForAerialRefuelling')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'theOrganisationAuthority', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('AuthorityForNavaidEquipment')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'theOrganisationAuthority', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('AuthorityForSpecialNavigationStation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'theOrganisationAuthority', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('AuthorityForSpecialNavigationSystem')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'theOrganisationAuthority', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('CallsignDetail')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'callSign']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'language']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('CircleSector')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'arcDirection']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'fromAngle']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'toAngle']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'angleType']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'angleDirectionReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'innerDistance']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'outerDistance']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'upperLimit']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'upperLimitReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lowerLimit']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lowerLimitReference']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('CirclingRestriction')?->id; $ref_feature_id = Feature::getFeature('Timesheet')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'timeInterval', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'specialDateAuthority', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('CircleSector')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'sectorDescription', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Surface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'restrictionArea', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('City')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'name']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('ConditionCombination')?->id; $ref_feature_id = Feature::getFeature('Timesheet')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'timeInterval', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'specialDateAuthority', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'logicalOperator']);
        $ref_feature_id = Feature::getFeature('Meteorology')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'weather', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('AircraftCharacteristic')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'aircraft', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('FlightCharacteristic')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'flight', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ConditionCombination')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'subCondition', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('ContactInformation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'name']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'title']);
        $ref_feature_id = Feature::getFeature('PostalAddress')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'address', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OnlineContact')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'networkNode', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('TelephoneContact')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'phoneFax', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('Curve')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'horizontalAccuracy']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'GM_Curve', 'description' => 'see gml:Curve']);
        $feature_id = Feature::getFeature('DepartureArrivalCondition')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'minimumEnrouteAltitude']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'minimumCrossingAtEnd']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'minimumCrossingAtEndReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'maximumCrossingAtEnd']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'maximumCrossingAtEndReference']);
        $ref_feature_id = Feature::getFeature('AircraftCharacteristic')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'engineType', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('DirectFlightClass')?->id; $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'exceedLength']);
        $feature_id = Feature::getFeature('DirectFlightSegment')?->id; $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('SignificantPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'end', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'End point of a direct flight segment.']);
        $ref_feature_id = Feature::getFeature('SignificantPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'start', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'Start of a direct flight segment.']);
        $feature_id = Feature::getFeature('ElevatedCurve')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'horizontalAccuracy']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'elevation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'geoidUndulation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'verticalDatum']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'verticalAccuracy']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'GM_Curve', 'description' => 'see gml:Curve']);
        $feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'horizontalAccuracy']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'elevation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'geoidUndulation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'verticalDatum']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'verticalAccuracy']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'GM_Point', 'description' => 'see gml:Point']);
        $feature_id = Feature::getFeature('ElevatedSurface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'horizontalAccuracy']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'elevation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'geoidUndulation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'verticalDatum']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'verticalAccuracy']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'GM_Surface', 'description' => 'see gml:Surface']);
        $feature_id = Feature::getFeature('EnRouteSegmentPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'reportingATC']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'flyOver']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'waypoint']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'radarGuidance']);
        $ref_feature_id = Feature::getFeature('PointReference')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'facilityMakeup', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('RadioFrequencyArea')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'extendedServiceVolume', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'roleFreeFlight']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'roleRVSM']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'turnRadius']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'roleMilitaryTraining']);
        $ref_feature_id = Feature::getFeature('SignificantPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'pointChoice', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'A choice of a navaid, an airport reference point, a TLOF aiming Point, a fix , a lat/long indicated by point object, or a Rwy threshold that defines the point.']);
        $feature_id = Feature::getFeature('EquipmentChoice')?->id; $ref_feature_id = Feature::getFeature('NavaidEquipment')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'navaidEquipment', 'ref_feature_id' => $ref_feature_id, 'description' => 'The component of a system used for air navigation.']);
        $ref_feature_id = Feature::getFeature('SpecialNavigationStation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'specialNavigationStation', 'ref_feature_id' => $ref_feature_id, 'description' => 'A land based station of a special navigation system.']);
        $ref_feature_id = Feature::getFeature('RadioCommunicationChannel')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'frequency', 'ref_feature_id' => $ref_feature_id, 'description' => 'A frequency in the range within which radio waves may be transmitted.']);
        $ref_feature_id = Feature::getFeature('PrecisionApproachRadar')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'precisionApproachRadar', 'ref_feature_id' => $ref_feature_id, 'description' => 'The Precision Approach Radar (PAR) affected by the signal limitation.']);
        $ref_feature_id = Feature::getFeature('SecondarySurveillanceRadar')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'radar', 'ref_feature_id' => $ref_feature_id, 'description' => 'The Radar (SSR) affected by the signal limitation.']);
        $feature_id = Feature::getFeature('EquipmentUnavailableAdjustmentColumn')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'guidanceEquipment']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'landingSystemLights']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'equipmentRVR']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'visibilityAdjustment']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'approachLightingInoperative']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('EquipmentUnavailableAdjustment')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'approachLightingInoperative']);
        $ref_feature_id = Feature::getFeature('EquipmentUnavailableAdjustmentColumn')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'adjustmentINOPCol', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('FASDataBlock')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'horizontalAlarmLimit']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'verticalAlarmLimit']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'thresholdCourseWidth']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lengthOffset']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'CRCRemainder']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'operationType']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'serviceProviderSBAS']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'approachPerformanceDesignator']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'routeIndicator']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'referencePathDataSelector']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'referencePathIdentifier']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'codeICAO']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('FinalProfile')?->id; $ref_feature_id = Feature::getFeature('ApproachAltitudeTable')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'altitude', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ApproachDistanceTable')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'distance', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ApproachTimingTable')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'timing', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('FlightCharacteristic')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'rule']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'status']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'military']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'origin']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'purpose']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('FlightConditionCircumstance')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'referenceLocation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'relationWithLocation']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('FlightConditionCombination')?->id; $ref_feature_id = Feature::getFeature('Timesheet')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'timeInterval', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'specialDateAuthority', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'logicalOperator']);
        $ref_feature_id = Feature::getFeature('FlightConditionElement')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'element', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('FlightConditionElement')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'index']);
        $ref_feature_id = Feature::getFeature('FlightConditionCircumstance')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'operationalCondition', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('FlightConditionElementChoice')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'flightCondition', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('FlightRestrictionLevel')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'flightLevel', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('FlightConditionElementChoice')?->id; $ref_feature_id = Feature::getFeature('AerialRefuelling')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'aerialRefuellingCondition', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'A condition based on an Aerial Refuelling.']);
        $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'airportHeliportCondition', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'A condition based on an AirportHeliport.']);
        $ref_feature_id = Feature::getFeature('Airspace')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'airspaceCondition', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'A condition based on an Airspace.']);
        $ref_feature_id = Feature::getFeature('SignificantPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'significantPointCondition', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'A condition based on a SignificantPoint.']);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'organisationCondition', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'A condition based on an Organisation or Authority.']);
        $ref_feature_id = Feature::getFeature('StandardInstrumentArrival')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'standardInstrumentArrivalCondition', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'A condition based on an Standard Instrument Arrival.']);
        $ref_feature_id = Feature::getFeature('StandardInstrumentDeparture')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'standardInstrumentDepartureCondition', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'A condition based on an SID.']);
        $ref_feature_id = Feature::getFeature('RoutePortion')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'routePortionCondition', 'ref_feature_id' => $ref_feature_id, 'description' => 'A condition based on a RoutePortion.']);
        $ref_feature_id = Feature::getFeature('AirspaceBorderCrossing')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'borderCrossingCondition', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'A condition based on the crossing of the common border between two adjacent airspaces.']);
        $ref_feature_id = Feature::getFeature('DirectFlight')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'directFlightCondition', 'ref_feature_id' => $ref_feature_id, 'description' => 'A condition based on a direct flight.']);
        $ref_feature_id = Feature::getFeature('FlightConditionCombination')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'operand', 'ref_feature_id' => $ref_feature_id, 'description' => 'A combination of flight conditions.']);
        $ref_feature_id = Feature::getFeature('Meteorology')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'weather', 'ref_feature_id' => $ref_feature_id, 'description' => 'A condition based on the weather.']);
        $ref_feature_id = Feature::getFeature('FlightCharacteristic')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'flight', 'ref_feature_id' => $ref_feature_id, 'description' => 'Condition based on a flight.']);
        $ref_feature_id = Feature::getFeature('AircraftCharacteristic')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'aircraft', 'ref_feature_id' => $ref_feature_id, 'description' => 'A condition based on an aircraft.']);
        $feature_id = Feature::getFeature('FlightRestrictionLevel')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'upperLevel']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'upperLevelReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lowerLevel']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'lowerLevelReference']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('FlightRestrictionRoute')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'priorPermission']);
        $ref_feature_id = Feature::getFeature('FlightRoutingElement')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'routeElement', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ContactInformation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'contact', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('FlightRoutingElement')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'orderNumber']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'speed']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'speedReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'speedCriteria']);
        $ref_feature_id = Feature::getFeature('FlightRestrictionLevel')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'flightLevel', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('FlightRoutingElementChoice')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'element', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('FlightRoutingElementChoice')?->id; $ref_feature_id = Feature::getFeature('AerialRefuelling')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'aerialRefuellingElement', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'Aerial Refuelling Element which is impacted by a flight restriction.']);
        $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'airportHeliportElement', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'Desc= AirportHeliport which is impacted by a flight restriction.']);
        $ref_feature_id = Feature::getFeature('Airspace')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'airspaceElement', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'Airspace which is impacted by a flight restriction.']);
        $ref_feature_id = Feature::getFeature('SignificantPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'pointElement', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'Significant Point which is impacted by a flight restriction.']);
        $ref_feature_id = Feature::getFeature('StandardInstrumentArrival')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'standardInstrumentArrivalElement', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'Standard Instrument Arrival which is impacted by a flight restriction.']);
        $ref_feature_id = Feature::getFeature('StandardInstrumentDeparture')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'standardInstrumentDepartureElement', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'SID which is impacted by a flight restriction.']);
        $ref_feature_id = Feature::getFeature('RoutePortion')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'routePortionElement', 'ref_feature_id' => $ref_feature_id, 'description' => 'Route Portion which is impacted by a flight restriction.']);
        $ref_feature_id = Feature::getFeature('DirectFlightSegment')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'directFlightElement', 'ref_feature_id' => $ref_feature_id, 'description' => 'Direct Flight Segment which is impacted by a flight restriction.']);
        $feature_id = Feature::getFeature('Fuel')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'category']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('GroundLightingAvailability')?->id; $ref_feature_id = Feature::getFeature('Timesheet')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'timeInterval', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'specialDateAuthority', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'operationalStatus']);
        $feature_id = Feature::getFeature('GuidanceService')?->id; $ref_feature_id = Feature::getFeature('Navaid')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'navaid', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'The associated Navaid.']);
        $ref_feature_id = Feature::getFeature('RadarSystem')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'radar', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'The Radar System.']);
        $ref_feature_id = Feature::getFeature('SpecialNavigationSystem')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'specialNavigationSystem', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'The navigation system.']);
        $feature_id = Feature::getFeature('HoldingPatternDistance')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'length']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('HoldingPatternDuration')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'duration']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('HoldingPatternLength')?->id; $ref_feature_id = Feature::getFeature('HoldingPatternDistance')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'endDistance', 'ref_feature_id' => $ref_feature_id, 'description' => 'span is length']);
        $ref_feature_id = Feature::getFeature('HoldingPatternDuration')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'endTime', 'ref_feature_id' => $ref_feature_id, 'description' => 'Span is timing']);
        $ref_feature_id = Feature::getFeature('SegmentPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'endPoint', 'ref_feature_id' => $ref_feature_id, 'description' => 'The second waypoint of a two point holding, used to define the end of the outbound leg.']);
        $feature_id = Feature::getFeature('HoldingUse')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'holdingUse']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'instruction']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'instructedAltitude']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'instructionAltitudeReference']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('HoldingPattern')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'theHoldingPattern', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('LandingTakeoffAreaCollection')?->id; $ref_feature_id = Feature::getFeature('RunwayDirection')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'runway', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('TouchDownLiftOff')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'TLOF', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('LightActivation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'clicks']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'intensityLevel']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'activation']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('LightElementStatus')?->id; $ref_feature_id = Feature::getFeature('Timesheet')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'timeInterval', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'specialDateAuthority', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'status']);
        $feature_id = Feature::getFeature('LightElement')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'colour']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'intensityLevel']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'intensity']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('LightElementStatus')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'availability', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('LinguisticNote')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'note']);
        $feature_id = Feature::getFeature('ManoeuvringAreaAvailability')?->id; $ref_feature_id = Feature::getFeature('Timesheet')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'timeInterval', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'specialDateAuthority', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'operationalStatus']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'warning']);
        $ref_feature_id = Feature::getFeature('ManoeuvringAreaUsage')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'usage', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('ManoeuvringAreaUsage')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'priorPermission']);
        $ref_feature_id = Feature::getFeature('ContactInformation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'contact', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ConditionCombination')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'selection', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'operation']);
        $feature_id = Feature::getFeature('MarkingElement')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'colour']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'style']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('MarkingExtent')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'extent', 'ref_feature_id' => $ref_feature_id, 'description' => 'The extent of the Marking Element.']);
        $feature_id = Feature::getFeature('MarkingExtent')?->id; $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'ref_feature_id' => $ref_feature_id, 'description' => 'Marking located at a point.']);
        $ref_feature_id = Feature::getFeature('ElevatedSurface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'surfaceExtent', 'ref_feature_id' => $ref_feature_id, 'description' => 'Marking described by the surface.']);
        $ref_feature_id = Feature::getFeature('ElevatedCurve')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'curveExtent', 'ref_feature_id' => $ref_feature_id, 'description' => 'Marking described by a curve.']);
        $feature_id = Feature::getFeature('Meteorology')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'flightConditions']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'visibility']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'visibilityInterpretation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'runwayVisualRange']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'runwayVisualRangeInterpretation']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('Minima')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'altitude']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'altitudeCode']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'altitudeReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'height']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'militaryHeight']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'radioHeight']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'heightCode']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'heightReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'visibility']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'militaryVisibility']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'mandatoryRVR']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'remoteAltimeterMinima']);
        $ref_feature_id = Feature::getFeature('EquipmentUnavailableAdjustment')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'adjustmentINOP', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('MissedApproachGroup')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'instruction']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'alternateClimbInstruction']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'alternateClimbAltitude']);
        $ref_feature_id = Feature::getFeature('AltimeterSource')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'altimeter', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('NavaidComponent')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'collocationGroup']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'markerPosition']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'providesNavigableLocation']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('NavaidEquipment')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'theNavaidEquipment', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('NavaidEquipmentDistance')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'distance']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'distanceAccuracy']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('NavaidEquipment')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'theNavaidEquipment', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('NavaidEquipmentMonitoring')?->id; $ref_feature_id = Feature::getFeature('Timesheet')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'timeInterval', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'specialDateAuthority', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'monitored']);
        $feature_id = Feature::getFeature('NavaidOperationalStatus')?->id; $ref_feature_id = Feature::getFeature('Timesheet')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'timeInterval', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'specialDateAuthority', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'operationalStatus']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'signalType']);
        $feature_id = Feature::getFeature('NavigationAreaSector')?->id; $ref_feature_id = Feature::getFeature('CircleSector')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'sectorDefinition', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Obstruction')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'significantObstacle', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Surface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'extent', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('SectorDesign')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'sectorCriteria', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('Nitrogen')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'propertyName']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'purpose']);
        $ref_feature_id = Feature::getFeature('LinguisticNote')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'translatedNote', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('ObstacleAreaOrigin')?->id; $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'ownerAirport', 'ref_feature_id' => $ref_feature_id, 'description' => 'The Airport for which the Obstacle Area has been defined.']);
        $ref_feature_id = Feature::getFeature('RunwayDirection')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'ownerRunway', 'ref_feature_id' => $ref_feature_id, 'description' => 'The Ruwnay for which the Obstacle Area has been defined.']);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'ownerOrganisation', 'ref_feature_id' => $ref_feature_id, 'description' => 'The Organisation for which the Obstacle Area has been defined.']);
        $feature_id = Feature::getFeature('ObstacleAssessmentArea')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'sectionNumber']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'slope']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'assessedAltitude']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'slopeLowerAltitude']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'gradientLowHigh']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'surfaceZone']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'safetyRegulation']);
        $ref_feature_id = Feature::getFeature('AircraftCharacteristic')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'aircraftCategory', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Obstruction')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'significantObstacle', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Surface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'surface', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Curve')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'startingCurve', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('ObstaclePlacement')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'obstacleBearing']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'obstacleDistance']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'pointType']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'obstaclePlacement']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('Obstruction')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'requiredClearance']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'minimumAltitude']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'surfacePenetration']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'slopePenetration']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'controlling']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'closeIn']);
        $ref_feature_id = Feature::getFeature('VerticalStructure')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'theVerticalStructure', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('AltitudeAdjustment')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'adjustment', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ObstaclePlacement')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'obstaclePlacement', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('Oil')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'category']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('OnlineContact')?->id; $ref_feature_id = Feature::getFeature('Timesheet')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'timeInterval', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'specialDateAuthority', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'network']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'linkage']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'protocol']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'eMail']);
        $feature_id = Feature::getFeature('OrganisationAuthorityAssociation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'theOrganisationAuthority', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('Oxygen')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('PointReference')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'role']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'priorFixTolerance']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'postFixTolerance']);
        $ref_feature_id = Feature::getFeature('DesignatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'point', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('AngleUse')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'facilityAngle', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('DistanceIndication')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'facilityDistance', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Surface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'fixToleranceArea', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('Point')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'horizontalAccuracy']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('PostalAddress')?->id; $ref_feature_id = Feature::getFeature('Timesheet')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'timeInterval', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'specialDateAuthority', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'deliveryPoint']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'city']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'administrativeArea']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'postalCode']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'country']);
        $feature_id = Feature::getFeature('ProcedureAvailability')?->id; $ref_feature_id = Feature::getFeature('Timesheet')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'timeInterval', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'specialDateAuthority', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'status']);
        $feature_id = Feature::getFeature('ProcedureTransitionLeg')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'seqNumberARINC']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('SegmentLeg')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'theSegmentLeg', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('ProcedureTransition')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'transitionId']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'instruction']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'vectorHeading']);
        $ref_feature_id = Feature::getFeature('LandingTakeoffAreaCollection')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'departureRunwayTransition', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Curve')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'trajectory', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('ProcedureTransitionLeg')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'transitionLeg', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('RadarComponent')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'collocationGroup']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('RadarEquipment')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'theRadarEquipment', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('RadioCommunicationOperationalStatus')?->id; $ref_feature_id = Feature::getFeature('Timesheet')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'timeInterval', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'specialDateAuthority', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'operationalStatus']);
        $feature_id = Feature::getFeature('Reflector')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'touchdownReflector', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('Ridge')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'side']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'distance']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'depth']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('RouteAvailability')?->id; $ref_feature_id = Feature::getFeature('Timesheet')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'timeInterval', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'specialDateAuthority', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'direction']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'cardinalDirection']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'status']);
        $ref_feature_id = Feature::getFeature('AirspaceLayer')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'levels', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('RoutePortion')?->id; $ref_feature_id = Feature::getFeature('Route')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'referencedRoute', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('SignificantPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'start', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'The starting SignificantPoint for the route portion.']);
        $ref_feature_id = Feature::getFeature('SignificantPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'intermediatePoint', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'The intermedia SignificantPoint for the route portion used to uniquely identify a route portion.']);
        $ref_feature_id = Feature::getFeature('SignificantPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'end', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'The ending SignificantPoint for the route portion.']);
        $feature_id = Feature::getFeature('RunwayContamination')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'observationTime']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'depth']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'frictionCoefficient']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'frictionEstimation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'frictionDevice']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'obscuredLights']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'furtherClearanceTime']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'furtherTotalClearance']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'nextObservationTime']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'proportion']);
        $ref_feature_id = Feature::getFeature('Ridge')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'criticalRidge', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('SurfaceContaminationLayer')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'layer', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'clearedLength']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'clearedWidth']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'clearedSide']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'furtherClearanceLength']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'furtherClearanceWidth']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'obscuredLightsSide']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'clearedLengthBegin']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'taxiwayAvailable']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'apronAvailable']);
        $feature_id = Feature::getFeature('RunwayDeclaredDistance')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        $ref_feature_id = Feature::getFeature('RunwayDeclaredDistanceValue')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'declaredValue', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('RunwayDeclaredDistanceValue')?->id; $ref_feature_id = Feature::getFeature('Timesheet')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'timeInterval', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'specialDateAuthority', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'distance']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'distanceAccuracy']);
        $feature_id = Feature::getFeature('RunwaySectionContamination')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'observationTime']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'depth']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'frictionCoefficient']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'frictionEstimation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'frictionDevice']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'obscuredLights']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'furtherClearanceTime']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'furtherTotalClearance']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'nextObservationTime']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'proportion']);
        $ref_feature_id = Feature::getFeature('Ridge')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'criticalRidge', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('SurfaceContaminationLayer')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'layer', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'section']);
        $feature_id = Feature::getFeature('SafeAltitudeAreaSector')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'bufferWidth']);
        $ref_feature_id = Feature::getFeature('Surface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'extent', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Obstruction')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'significantObstacle', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('CircleSector')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'sectorDefinition', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('SectorDesign')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'turnDirection']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'designGradient']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'terminationAltitude']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'turnPermitted']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('SegmentPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'reportingATC', 'description' => 'An indicator of the type of position report (e.g., compulsory or on request ) required by an ATC Unit.']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'flyOver', 'description' => 'Indicates if the aircraft is required to fly directly over the fix. If code is Yes, then it is a fly-over waypoint. If the code is No, then the associated fix is a fly-by waypoint. [ICAO] Waypoints are identified as either flyover or fly-by. Fly-by waypoint. A waypoint which requires turn anticipation to allow tangential interception of the next segment of a route or procedure Flyover waypoint. A waypoint at which a turn is initiated in order to join the next segment of a route or procedure.']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'waypoint', 'description' => 'A point used for Area Navigation (RNAV) procedures/routes.']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'radarGuidance', 'description' => 'Radar guidance is possible for reaching an associated point.']);
        $ref_feature_id = Feature::getFeature('PointReference')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'facilityMakeup', 'ref_feature_id' => $ref_feature_id, 'description' => 'Specific facility make up used by aircraft to locate the segment point.']);
        $ref_feature_id = Feature::getFeature('RadioFrequencyArea')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'extendedServiceVolume', 'ref_feature_id' => $ref_feature_id, 'description' => 'An approved and flight checked extension to the standard service volume of a navaid']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('SignificantPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'pointChoice', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true, 'description' => 'A choice of a navaid, an airport reference point, a TLOF aiming Point, a fix , a lat/long indicated by point object, or a Rwy threshold that defines the point.']);
        $feature_id = Feature::getFeature('ServiceOperationalStatus')?->id; $ref_feature_id = Feature::getFeature('Timesheet')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'timeInterval', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'specialDateAuthority', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'operationalStatus']);
        $feature_id = Feature::getFeature('SignificantPoint')?->id; $ref_feature_id = Feature::getFeature('AirportHeliport')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'airportReferencePoint', 'ref_feature_id' => $ref_feature_id, 'description' => 'the point designated as the center of the airport.']);
        $ref_feature_id = Feature::getFeature('TouchDownLiftOff')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'aimingPoint', 'ref_feature_id' => $ref_feature_id, 'description' => 'The point at the centre of the TLOF.']);
        $ref_feature_id = Feature::getFeature('RunwayCentrelinePoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'runwayPoint', 'ref_feature_id' => $ref_feature_id, 'description' => 'A designated point on the runway centreline.']);
        $ref_feature_id = Feature::getFeature('Point')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'position', 'ref_feature_id' => $ref_feature_id, 'description' => 'An unnamed point designated only with a latitude/longitude.']);
        $ref_feature_id = Feature::getFeature('Navaid')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'navaidSystem', 'ref_feature_id' => $ref_feature_id, 'description' => 'A navaid used as significant point.']);
        $ref_feature_id = Feature::getFeature('DesignatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'fixDesignatedPoint', 'ref_feature_id' => $ref_feature_id, 'description' => 'A selected point that may have references (distance and/or angle indications)']);
        $feature_id = Feature::getFeature('SpecialNavigationStationStatus')?->id; $ref_feature_id = Feature::getFeature('Timesheet')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'timeInterval', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'specialDateAuthority', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'operationalStatus']);
        $feature_id = Feature::getFeature('StandardLevel')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'verticalDistance']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('SurfaceCharacteristics')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'composition']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'preparation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'surfaceCondition']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'classPCN']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'pavementTypePCN']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'pavementSubgradePCN']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'maxTyrePressurePCN']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'evaluationMethodPCN']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'classLCN']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'weightSIWL']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'tyrePressureSIWL']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'weightAUW']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('SurfaceContaminationLayer')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'layerOrder']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        $ref_feature_id = Feature::getFeature('ElevatedSurface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'extent', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('Surface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'horizontalAccuracy']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'GM_Surface', 'description' => 'see gml:Surface']);
        $feature_id = Feature::getFeature('SurveillanceGroundStation')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'videoMap']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Unit')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'theUnit', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('TaxiwayContamination')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'observationTime']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'depth']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'frictionCoefficient']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'frictionEstimation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'frictionDevice']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'obscuredLights']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'furtherClearanceTime']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'furtherTotalClearance']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'nextObservationTime']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'proportion']);
        $ref_feature_id = Feature::getFeature('Ridge')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'criticalRidge', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('SurfaceContaminationLayer')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'layer', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'clearedWidth']);
        $feature_id = Feature::getFeature('TelephoneContact')?->id; $ref_feature_id = Feature::getFeature('Timesheet')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'timeInterval', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'specialDateAuthority', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'voice']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'facsimile']);
        $feature_id = Feature::getFeature('TerminalArrivalAreaSector')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'flyByCode']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'procedureTurnRequired']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'altitudeDescription']);
        $ref_feature_id = Feature::getFeature('CircleSector')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'sectorDefinition', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Surface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'extent', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Obstruction')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'significantObstacle', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('TerminalSegmentPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'reportingATC']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'flyOver']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'waypoint']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'radarGuidance']);
        $ref_feature_id = Feature::getFeature('PointReference')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'facilityMakeup', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('RadioFrequencyArea')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'extendedServiceVolume', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'role']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'leadRadial']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'leadDME']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'indicatorFACF']);
        $feature_id = Feature::getFeature('Timesheet')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'timeReference']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'startDate']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'endDate']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'day']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'dayTil']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'startTime']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'startEvent']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'startTimeRelativeEvent']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'startEventInterpretation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'endTime']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'endEvent']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'endTimeRelativeEvent']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'endEventInterpretation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'daylightSavingAdjust']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'excluded']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('TouchDownLiftOffContamination')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'observationTime']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'depth']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'frictionCoefficient']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'frictionEstimation']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'frictionDevice']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'obscuredLights']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'furtherClearanceTime']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'furtherTotalClearance']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'nextObservationTime']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'proportion']);
        $ref_feature_id = Feature::getFeature('Ridge')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'criticalRidge', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('SurfaceContaminationLayer')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'layer', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $feature_id = Feature::getFeature('UnitAvailability')?->id; $ref_feature_id = Feature::getFeature('Timesheet')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'timeInterval', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'specialDateAuthority', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'operationalStatus']);
        $feature_id = Feature::getFeature('UnitDependency')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Unit')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'theUnit', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        $feature_id = Feature::getFeature('VerticalStructureLightingStatus')?->id; $ref_feature_id = Feature::getFeature('Timesheet')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'timeInterval', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'specialDateAuthority', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'status']);
        $feature_id = Feature::getFeature('VerticalStructurePart')?->id; $ref_feature_id = Feature::getFeature('Timesheet')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'timeInterval', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'specialDateAuthority', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'verticalExtent']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'verticalExtentAccuracy']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'type']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'constructionStatus']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'markingPattern']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'markingFirstColour']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'markingSecondColour']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'mobile']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'frangible']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'visibleMaterial']);
        Property::create(['feature_id'=>$feature_id, 'name' => 'designator']);
        $ref_feature_id = Feature::getFeature('LightElement')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'lighting', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('VerticalStructurePartGeometry')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'horizontalProjection', 'ref_feature_id' => $ref_feature_id, 'description' => 'The three different possibilities for describing the horizontal projection of an obstacle: point, line or polygon']);
        $feature_id = Feature::getFeature('VerticalStructurePartGeometry')?->id; $ref_feature_id = Feature::getFeature('ElevatedCurve')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'linearExtent', 'ref_feature_id' => $ref_feature_id, 'description' => 'The extent of the vertical structure.']);
        $ref_feature_id = Feature::getFeature('ElevatedPoint')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'location', 'ref_feature_id' => $ref_feature_id, 'description' => 'Location of the vertical structure.']);
        $ref_feature_id = Feature::getFeature('ElevatedSurface')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'surfaceExtent', 'ref_feature_id' => $ref_feature_id, 'description' => 'The extent of the vertical structure part.']);
        $feature_id = Feature::getFeature('WorkareaActivity')?->id; $ref_feature_id = Feature::getFeature('Timesheet')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'timeInterval', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('Note')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'annotation', 'ref_feature_id' => $ref_feature_id]);
        $ref_feature_id = Feature::getFeature('OrganisationAuthority')?->id; Property::create(['feature_id'=>$feature_id, 'name' => 'specialDateAuthority', 'ref_feature_id' => $ref_feature_id, 'is_xlink' => true]);
        Property::create(['feature_id'=>$feature_id, 'name' => 'isActive']);

    }
}
